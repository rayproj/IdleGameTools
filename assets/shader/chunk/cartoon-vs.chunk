precision highp float;

#include <legacy/input-standard>
#include <builtin/uniforms/cc-global>
#include <legacy/local-batch>
#include <legacy/fog-vs>

#include <legacy/shadow-map-vs>
#if CC_RECEIVE_SHADOW
  out mediump vec2 v_shadowBias;
#endif

#if USE_VERTEX_COLOR
  in lowp vec4 a_color;
  out lowp vec4 v_color;
#endif

#if USE_BLINK
  #if USE_INSTANCING
    #pragma format(RGBA8)
    in vec4 ai_blinkColor;
    out vec4 vi_blinkColor;
  #endif
#endif

out vec2 v_uv;
uniform TexCoords {
  vec4 tilingOffset;
};

out vec3 v_worldPos;
out vec3 v_worldNormal;

vec4 vert () {
  StandardVertInput In;
  CCVertInput(In);

  mat4 matWorld, matWorldIT;
  CCGetWorldMatrixFull(matWorld, matWorldIT);

  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;

  #if USE_VERTEX_COLOR
    v_color = a_color;
  #endif

  vec4 worldPos = matWorld * In.position;

  #if CC_DIR_LIGHT_SHADOW_TYPE == CC_DIR_LIGHT_SHADOW_UNIFORM
    CC_TRANSFER_SHADOW(pos);
  #endif

  #if CC_RECEIVE_SHADOW
    v_shadowBias = CCGetShadowBias();
  #endif

  #if USE_WIND
    float speed = 0.8;
    float strength = 0.05;
    float mask = In.position.z * In.position.z;
    worldPos.x += sin(cc_time.x * speed) * strength * mask;
  #endif

  #if USE_BLINK
    #if USE_INSTANCING
      vi_blinkColor = ai_blinkColor;
    #endif
  #endif

  v_worldPos = worldPos.xyz;
  v_worldNormal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);

  CC_TRANSFER_FOG(matWorld * In.position);
  return cc_matProj * cc_matView * worldPos;
}
