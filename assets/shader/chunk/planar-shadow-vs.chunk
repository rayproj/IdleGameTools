precision highp float;
#include <legacy/input>
#include <builtin/uniforms/cc-global>
#include <legacy/decode-base>
#include <legacy/local-batch>
// #include <builtin/uniforms/cc-shadow>

out float v_dist;

vec4 vert () {
  vec4 position;
  CCVertInput(position);

  mat4 matWorld;
  CCGetWorldMatrix(matWorld);

  vec3 P = (matWorld * position).xyz;
  vec3 L = cc_mainLitDir.xyz;
  vec4 cc_planarNDInfo = vec4(0.0, 1.0, 0.0, -0.0);
  vec3 N = cc_planarNDInfo.xyz;
  float d = cc_planarNDInfo.w + 0.001;
  float dist = (-d - dot(P, N)) / (dot(L, N) + 0.0001);
  vec3 shadowPos = P + L * dist;

  // avoid z-fighting with shadow plane
  vec3 view = normalize(cc_cameraPos.xyz - shadowPos);
  float viewLength = length(cc_cameraPos.xyz - shadowPos);
  shadowPos += view * min(1.0, 0.005 * viewLength);

  // 优化一些极端情况
  // shadowPos.y = mix(P.y - 0.0001, shadowPos.y, step(shadowPos.y, P.y));

  position = cc_matProj * cc_matView * vec4(shadowPos, 1.0);
  v_dist = dist;
  return position;
}