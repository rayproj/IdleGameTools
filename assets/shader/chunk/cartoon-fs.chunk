precision highp float;
// #include <legacy/output-standard>
#include <legacy/fog-fs>
#include <chunk/cartoon-common>

#if USE_ALPHA_TEST
  #pragma define-meta ALPHA_TEST_CHANNEL options([a, r, g, b])
#endif

in vec2 v_uv;
uniform sampler2D mainTexture;

uniform Constant {
  vec4 mainColor;
  vec4 specColor;
  vec4 colorScaleAndCutoff;
  vec2 specParams;
};

#if USE_VERTEX_COLOR
  in lowp vec4 v_color;
#endif

#if USE_BLINK
  #if USE_INSTANCING
    in vec4 vi_blinkColor;
  #endif
#endif

in vec3 v_worldPos;
in vec3 v_worldNormal;

struct CarToonSurface {
  float a;
  vec3 albedo;
  vec3 color;
};

void surf(out CarToonSurface s) {
  vec3 color;
  vec4 texColor = texture(mainTexture, v_uv);

  #if USE_ALPHA_TEST
    if (texColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;
  #endif

  #if USE_VERTEX_COLOR
    texColor *= v_color;
  #endif

  vec3 worldNormal = v_worldNormal;
  vec3 worldLightDir = normalize(-cc_mainLitDir.xyz);

  vec3 albedo = texColor.rgb * mainColor.rgb * colorScaleAndCutoff.xyz;;
  color.rgb = getCartoonColor(albedo, v_worldNormal, worldLightDir);

  // 高光
  #if USE_SPECULAR
    vec3 worldViewDir = normalize(cc_cameraPos.xyz - v_worldPos);
    vec3 worldHalfDir = normalize(worldLightDir + worldViewDir);
    float spec = dot(worldNormal, worldHalfDir);
    // spec = pow(spec * 0.5 + 0.5, 8.0);
    spec = spec * 0.5 + 0.5;
    spec = step(specParams.x, spec);
    vec3 specular = cc_mainLitColor.rgb * spec * specColor.rgb;
    color.rgb += specular;
  #endif

  s.color = color;
  s.a = texColor.a;
  s.albedo = albedo;
}
